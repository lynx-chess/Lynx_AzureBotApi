name: Build

on:
  push:
  schedule:
    - cron:  '1 0 * * 1'    # Mondays at 00:01

jobs:

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            runtime-identifier: linux-x64
          - os: windows-latest
            runtime-identifier: win-x64
          - os: macOS-latest
            runtime-identifier: osx-x64
      fail-fast: false

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      PROJECT_NAME: Lynx

    steps:
    - uses: actions/checkout@v3

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
        include-prerelease: true

    - name: Nuget cache
      uses: actions/cache@v3
      with:
        path:
          ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Build
      run: dotnet build -c Release /p:DeterministicBuild=true

    - name: Run CI tests
      run: dotnet test -c Release --no-build --collect:"XPlat Code Coverage" --logger "console;verbosity=normal"

    - name: '[Ubuntu] Generate test coverage report'
      if: matrix.os == 'ubuntu-latest' && matrix.configuration == 'Release'
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.6
      with:
        reports: 'tests/**/*.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline_AzurePipelines_Dark;SonarQube;Cobertura'
        assemblyfilters: '+*'
        classfilters: '+*'
        filefilters: '+*'
        verbosity: 'Info'
        title: '${{ env.PROJECT_NAME }} #${{ github.run_number }} (${{ env.GITHUB_REF_SLUG }})'
        tag: '${{ github.run_number }}_${{ github.run_id }}'
        customSettings: 'numberOfReportsParsedInParallel=3;numberOfReportsMergedInParallel=3'

    - name: '[Ubuntu] Upload test coverage report'
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-build-coverage-ci-${{ github.run_number }}
        path: coveragereport/
        if-no-files-found: error

    - name: Publish API
      run: dotnet publish src/Lynx.AzureBotApi/Lynx.AzureBotApi.csproj -c Release --runtime ${{ matrix.runtime-identifier }} --self-contained -o artifacts/${{ matrix.runtime-identifier }}

    - name: Upload Lynx-${{ env.GITHUB_REF_SLUG }}-${{ github.run_number }}-${{ matrix.runtime-identifier }} artifact
      uses: actions/upload-artifact@v3
      with:
        name: Lynx-${{ env.GITHUB_REF_SLUG }}-${{ github.run_number }}-${{ matrix.runtime-identifier }}
        path: |
          artifacts/${{ matrix.runtime-identifier }}/
          !artifacts/**/*.pdb
        if-no-files-found: error
